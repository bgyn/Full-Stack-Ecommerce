generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       Role     @default(USER)
  isActive   Boolean  @default(true) @map("is_active")
  isVerified Boolean  @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  fcms       FCM[]
  profile    Profile?

  @@map("user")
}

model FCM {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  device_type String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("fcm")
}

model Profile {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  profileImage String?
  name         String
  phone        Int?
  dob          DateTime?
  gender       String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  ProductVariants   ProductVariants[]
  ProductCategories ProductCategories[]

  @@map("product")
}

model ProductVariants {
  id        Int      @id @default(autoincrement())
  productId Int
  price     Float
  color     String
  size      String
  stock     Int
  sku       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductImages ProductImages[]

  @@map("product_variants")
}

model ProductImages {
  id               Int      @id @default(autoincrement())
  productVariantId Int
  image            String
  isPrimary        Boolean  @default(false) @map("is_primary")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  productVariant ProductVariants? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductCategories {
  productId  Int @map("product_id")
  categoryId Int @map("category_id")

  product  Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Categories {
  id                Int                 @id @default(autoincrement())
  categoryName      String              @map("category_name")
  categoryImage     String              @map("category_image")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  CategoriesGroup   CategoriesGroup[]
  Group             Group?              @relation(fields: [groupId], references: [id])
  groupId           Int?
  ProductCategories ProductCategories[]

  @@map("categories")
}

model Group {
  id              Int               @id @default(autoincrement())
  groupName       String            @map("group_name")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  Categories      Categories[]
  CategoriesGroup CategoriesGroup[]

  @@map("group")
}

model CategoriesGroup {
  categoryId Int
  groupId    Int

  category Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  group    Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([categoryId, groupId])
  @@map("categories_group")
}
